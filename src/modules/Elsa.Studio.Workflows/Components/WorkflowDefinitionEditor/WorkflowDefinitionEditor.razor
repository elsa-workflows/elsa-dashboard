@using System.Text.Json.Nodes
@using Orientation = Radzen.Orientation
@using Elsa.Studio.Workflows.Models
@using Elsa.Api.Client.Resources.WorkflowDefinitions.Models
@using Elsa.Api.Client.Shared.Models
@using Elsa.Studio.Workflows.Domain.Contracts
@using Elsa.Studio.Workflows.Domain.Models
@using Elsa.Studio.Workflows.Shared.Args
@inherits StudioComponentBase

@inject IWorkflowDefinitionService WorkflowDefinitionService

@if (IsReadOnly)
{
    <MudAlert Severity="Severity.Warning" Variant="MudBlazor.Variant.Filled" Square="true" Class="py-1" Icon="@Icons.Material.Filled.EnergySavingsLeaf">Unable to make changes as the workflow or application is currently in read-only mode.</MudAlert>
}

<CascadingValue Value="_dragDropManager">
    <RadzenSplitter Orientation="Orientation.Horizontal" Style="height: calc(100vh - var(--mud-appbar-height));">
        <RadzenSplitterPane Size="15%" Min="100px">
            <ActivityPicker/>
        </RadzenSplitterPane>
        <RadzenSplitterPane Size="85%">
            <WorkflowDefinitionWorkspace
                @ref="WorkflowDefinitionWorkspace"
                WorkflowDefinition="@_workflowDefinition"
                WorkflowDefinitionVersionSelected="WorkflowDefinitionVersionSelected"
                WorkflowDefinitionExecuted="WorkflowDefinitionExecuted"
                ActivitySelected="ActivitySelected"
                Saving="Saving"
                Saved="Saved"
                SavingFailed="SavingFailed"
                Publishing="Publishing"
                Published="Published"
                PublishingFailed="PublishingFailed"
                Retracting="Retracting"
                Retracted="Retracted"
                RetractingFailed="RetractingFailed"
                Exporting="Exporting"
                Exported="Exported"
                Importing="Importing"
                Imported="Imported"
                WorkflowDefinitionReverting="WorkflowDefinitionReverting"
                WorkflowDefinitionReverted="WorkflowDefinitionReverted"
                WorkflowDefinitionVersionDeleting="WorkflowDefinitionVersionDeleting"
                WorkflowDefinitionVersionDeleted="WorkflowDefinitionVersionDeleted"
                />
        </RadzenSplitterPane>
    </RadzenSplitter>
</CascadingValue>

@code
{
    private readonly DragDropManager _dragDropManager = new();
    private WorkflowDefinition? _workflowDefinition;
    private WorkflowDefinitionWorkspace WorkflowDefinitionWorkspace { get; set; } = default!;

    /// The ID of the workflow definition to load.
    [Parameter] public string DefinitionId { get; set; } = default!;

    /// Gets or sets the event that occurs when the workflow definition version is updated.
    [Parameter] public EventCallback<WorkflowDefinition> WorkflowDefinitionVersionSelected { get; set; }

    /// Gets or sets the event triggered when an activity is selected.
    [Parameter] public EventCallback<JsonObject> ActivitySelected { get; set; }

    /// Gets or sets the event triggered when the workflow definition is being saved.
    [Parameter] public EventCallback Saving { get; set; }

    /// Gets or sets the event triggered when the workflow definition has been saved.
    [Parameter] public EventCallback Saved { get; set; }

    /// Gets or sets the event triggered when the workflow definition has failed to save.
    [Parameter] public EventCallback<ValidationErrors> SavingFailed { get; set; }

    /// Gets or sets the event triggered when the workflow definition is being published.
    [Parameter] public EventCallback Publishing { get; set; }

    /// Gets or sets the event triggered when the workflow definition has been published.
    [Parameter] public EventCallback Published { get; set; }

    /// Gets or sets the event triggered when the workflow definition has failed to publish.
    [Parameter] public EventCallback<ValidationErrors> PublishingFailed { get; set; }

    /// Gets or sets the event triggered when the workflow definition is being retracted.
    [Parameter] public EventCallback Retracting { get; set; }

    /// Gets or sets the event triggered when the workflow definition has been retracted.
    [Parameter] public EventCallback Retracted { get; set; }

    /// Gets or sets the event triggered when the workflow definition has failed to retract.
    [Parameter] public EventCallback<ValidationErrors> RetractingFailed { get; set; }

    /// Gets or sets the event triggered when the workflow definition is being exported.
    [Parameter] public EventCallback Exporting { get; set; }

    /// Gets or sets the event triggered when the workflow definition has been exported.
    [Parameter] public EventCallback Exported { get; set; }

    /// Gets or sets the event triggered when the workflow definition is being imported.
    [Parameter] public EventCallback<IReadOnlyList<IBrowserFile>> Importing { get; set; }

    /// Gets or sets the event triggered when the workflow definition has been imported.
    [Parameter] public EventCallback<IReadOnlyList<IBrowserFile>> Imported { get; set; }

    /// Gets or sets the callback that is invoked when the workflow definition is about to be reverted to an earlier version.
    [Parameter] public EventCallback<WorkflowDefinitionVersionEventArgs> WorkflowDefinitionReverting { get; set; }

    /// Gets or sets the callback that is invoked when the workflow definition is reverted to an earlier version.
    [Parameter] public EventCallback<WorkflowDefinitionVersionEventArgs> WorkflowDefinitionReverted { get; set; }
    
    /// Gets or sets a callback that is invoked when the workflow definition version is about to be deleted.
    [Parameter] public EventCallback<WorkflowDefinitionVersionEventArgs> WorkflowDefinitionVersionDeleting { get; set; }
    
    /// Gets or sets a callback that is invoked when the workflow definition version is about to be deleted.
    [Parameter] public EventCallback<WorkflowDefinitionVersionEventArgs> WorkflowDefinitionVersionDeleted { get; set; }

    /// Gets the currently selected workflow definition version.
    public WorkflowDefinition? GetSelectedWorkflowDefinitionVersion() => WorkflowDefinitionWorkspace.GetSelectedWorkflowDefinitionVersion();

    /// <summary>An event that is invoked when a workflow definition has been executed.</summary>
    /// <remarks>The ID of the workflow instance is provided as the value to the event callback.</remarks>
    [Parameter] public EventCallback<string> WorkflowDefinitionExecuted { get; set; }

    /// Gets the currently selected activity ID.
    public string? SelectedActivityId => WorkflowDefinitionWorkspace.SelectedActivityId;

    /// Gets a value that indicates if the workflow definition editor should be displayed in readonly mode.
    public bool IsReadOnly => _workflowDefinition != null && (_workflowDefinition?.Links?.Count(l => l.Rel == "publish") ?? 0) == 0;

    /// <inheritdoc />
    protected override async Task OnParametersSetAsync()
    {
        _workflowDefinition = await WorkflowDefinitionService.FindByDefinitionIdAsync(DefinitionId, VersionOptions.Latest);
    }
}