@page "/ai/agents/{AgentId}"
@using Elsa.Agents
@using Variant = MudBlazor.Variant
@inherits StudioComponentBase

<PageTitle>Agent</PageTitle>

<MudContainer MaxWidth="MaxWidth.False">
<PageHeading Text="@($"Agent: {_agent.Name}")"/>

<MudCard>
<MudForm Model="@_agent"
         @ref="@_form"
         Validation="@((Func<AgentModel, bool>)(x => _validator.Validate(x).IsValid))"
         ValidationDelay="0">

<MudTabs Border="false" PanelClass="pa-6">
<MudTabPanel Text="General">
    <MudStack Spacing="8">
        <MudTextField @bind-Value="_agent.Name"
                      For="@(() => _agent.Name)"
                      Immediate="true"
                      Label="Name"
                      Variant="Variant.Outlined"
                      HelperText="The name of the agent."/>

        <MudTextField @bind-Value="_agent.Description"
                      For="@(() => _agent.Description)"
                      Immediate="false"
                      Label="Description"
                      Variant="Variant.Outlined"
                      HelperText="A description about the role and purpose of this agent."/>

        <MudTextField @bind-Value="_agent.FunctionName"
                      For="@(() => _agent.FunctionName)"
                      Immediate="false"
                      Label="Function Name"
                      Variant="Variant.Outlined"
                      HelperText="A technical name for the function that this agent perform. For example: WriteCode"/>

        <MudTextField @bind-Value="_agent.PromptTemplate"
                      For="@(() => _agent.PromptTemplate)"
                      Immediate="false"
                      Lines="10"
                      Label="Prompt Template"
                      Variant="Variant.Outlined"
                      HelperText="Used to define the initial instructions or context that the Semantic Kernel agent will use to generate responses. This template guides the agent's behavior and helps it understand the role it needs to play or the tasks it needs to perform."/>
    </MudStack>
</MudTabPanel>
<MudTabPanel Text="Input">
    <MudTable T="InputVariableConfig"
              @ref="@_inputVariableTable"
              Items="_agent.InputVariables"
              Dense="true"
              Hover="true"
              CanCancelEdit="true"
              EditTrigger="TableEditTrigger.EditButton"
              SelectOnRowClick="true"
              IsEditRowSwitchingBlocked="false"
              RowEditPreview="BackupInputVariable"
              RowEditCancel="RestoreInputVariable"
              RowEditCommit="CommitInputVariable">
        <ColGroup>
            <col/>
            <col/>
            <col/>
            <col style="width:50px;"/>
            <col style="width:50px;"/>
        </ColGroup>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Type</MudTh>
            <MudTh>Description</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Type">@context.Type</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Outlined.Delete" OnClick="() => DeleteInputVariable(context)"/>
            </MudTd>
        </RowTemplate>
        <RowEditingTemplate>
            <MudTd DataLabel="Name">
                <MudTextField @bind-Value="@context.Name"
                              For="@(() => context.Name)"
                              Immediate="false"
                              Label="Name"
                              Variant="Variant.Outlined"
                              HelperText="The technical name of the input variable. When referencing this variable in the prompt template, use this name."/>
            </MudTd>
            <MudTd DataLabel="Type">
                <MudSelect @bind-Value="@context.Type"
                           T="string"
                           For="@(() => context.Type)"
                           Immediate="false"
                           Label="Type"
                           Variant="Variant.Outlined"
                           HelperText="The .NET type of the input variable.">
                    <MudSelectItem T="string" Value="@("string")">string</MudSelectItem>
                    <MudSelectItem T="string" Value="@("int")">int</MudSelectItem>
                    <MudSelectItem T="string" Value="@("object")">object</MudSelectItem>
                </MudSelect>
            </MudTd>
            <MudTd DataLabel="Description">
                <MudTextField @bind-Value="@context.Description"
                              For="@(() => context.Description)"
                              Immediate="false"
                              Label="Description"
                              Variant="Variant.Outlined"
                              HelperText="A description about the role and purpose of this input variable."/>
            </MudTd>
            <MudTd></MudTd>
        </RowEditingTemplate>
    </MudTable>
    <MudButton Class="mt-2" Color="Color.Secondary" Variant="Variant.Filled" OnClick="@OnAddInputVariableClicked">Add</MudButton>
</MudTabPanel>
<MudTabPanel Text="Output">
    <MudStack Spacing="8">
        <MudTextField @bind-Value="_agent.OutputVariable.Description"
                      For="@(() => _agent.OutputVariable.Description)"
                      Immediate="false"
                      Label="Description"
                      Variant="Variant.Outlined"
                      HelperText="The description of the output variable."/>
        <MudSelect @bind-Value="@_agent.OutputVariable.Type"
                   T="string"
                   For="@(() => _agent.OutputVariable.Type)"
                   Immediate="false"
                   Label="Type"
                   Variant="Variant.Outlined"
                   HelperText="The .NET type of the output variable.">
            <MudSelectItem T="string" Value="@("string")">string</MudSelectItem>
            <MudSelectItem T="string" Value="@("int")">int</MudSelectItem>
            <MudSelectItem T="string" Value="@("object")">object</MudSelectItem>
        </MudSelect>
    </MudStack>
</MudTabPanel>
<MudTabPanel Text="Services">
    <MudStack Spacing="8">
        <MudField Label="Services" HelperText="The services that the agent requires.">
            <MudList T="string" @bind-SelectedValues="SelectedServices" SelectionMode="SelectionMode.MultiSelection">
                @foreach (var service in AvailableServices)
                {
                    <MudListItem Text="@service.Name" Value="@service.Name"/>
                }
            </MudList>
        </MudField>
    </MudStack>
</MudTabPanel>
<MudTabPanel Text="Plugins">
    <MudStack Spacing="8">
        <MudField Label="Plugins" HelperText="The plugins that the agent can use.">
            <MudList T="string" @bind-SelectedValues="SelectedPlugins" SelectionMode="SelectionMode.MultiSelection">
                @foreach (var plugin in AvailablePlugins)
                {
                    <MudListItem Text="@plugin.Name" Value="@plugin.Name"/>
                }
            </MudList>
        </MudField>
    </MudStack>
</MudTabPanel>
<MudTabPanel Text="Execution Settings">
    <MudStack Spacing="8">
        <MudField HelperText="The temperature of the model. Higher values mean the model will take more risks. Try 0.1 for results that are very close to what the model was trained on. Try 0.9 for very creative results."
                  Label="Temperature"
                  Variant="Variant.Outlined">
            <MudSlider T="double" @bind-Value="_agent.ExecutionSettings.Temperature"
                       Immediate="true"
                       Min="0"
                       Max="1"
                       Step="0.1"
                       ValueLabel="true"
                       TickMarks="true"
                       Variant="Variant.Filled">
                @_agent.ExecutionSettings.Temperature
            </MudSlider>
        </MudField>
        <MudField Label="TopP"
                  HelperText="Top Probability determines the cumulative probability threshold for token selection during text generation. Lower values will result in less diversity, making the model pick from the most probable tokens only. Higher values will allow for more diverse outputs, as the model will consider a wider range of tokens."
                  Variant="Variant.Outlined">
            <MudSlider T="double" @bind-Value="_agent.ExecutionSettings.TopP"
                       Immediate="true"
                       Min="0"
                       Max="1"
                       Step="0.1"
                       Variant="Variant.Outlined">
                @_agent.ExecutionSettings.TopP
            </MudSlider>
        </MudField>
        <MudField Label="Frequency Penalty"
                  HelperText="The penalty for repeating any one token. A higher frequency penalty will reduce the likelihood of token repetition, fostering more varied text generation."
                  Variant="Variant.Outlined">
            <MudSlider T="double" @bind-Value="_agent.ExecutionSettings.FrequencyPenalty"
                       Immediate="true"
                       Min="0"
                       Max="1"
                       Step="0.1"
                       Variant="Variant.Outlined">
                @_agent.ExecutionSettings.FrequencyPenalty
            </MudSlider>
        </MudField>
        <MudField Label="Presence Penalty"
                  HelperText="The penalty for repeating any one token. A higher presence penalty will reduce the likelihood of token repetition, fostering more varied text generation."
                  Variant="Variant.Outlined">
            <MudSlider T="double" @bind-Value="_agent.ExecutionSettings.PresencePenalty"
                       Immediate="true"
                       Min="0"
                       Max="1"
                       Step="0.1"
                       Variant="Variant.Outlined">
                @_agent.ExecutionSettings.PresencePenalty
            </MudSlider>
        </MudField>
        <MudNumericField T="int?" @bind-Value="_agent.ExecutionSettings.MaxTokens"
                         Immediate="true"
                         Label="Max Tokens"
                         HelperText="The maximum number of tokens to generate. Leave empty for maximum."
                         Clearable="true"
                         Step="20"
                         Variant="Variant.Outlined">
        </MudNumericField>
        <MudCheckBox T="bool" @bind-Value="UseJsonResponse"
                     Label="Use JSON Response"/>
    </MudStack>
</MudTabPanel>
</MudTabs>
</MudForm>
<MudCardActions>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await OnSaveClicked())">Save</MudButton>
</MudCardActions>
</MudCard>
</MudContainer>